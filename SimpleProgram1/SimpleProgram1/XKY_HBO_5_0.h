/***************************************************************************

                                XKY_HBO_5_0.h
                             -------------------
 
 ***************************************************************************/
#ifndef _XKYHBO_5_0
#define _XKYHBO_5_0

#define NVM	   180  //максимальное число витков на участке автономного функционирования FORM
#define NI	   5    //макс.кол-во наборов коэфф.для аппроксимации параметров орбиты FORM, BM_MTime

typedef int		_I;
typedef double _D;


typedef struct 
{
 int	day;
 double	sec;
}TIME;

typedef struct 
{
 int	d;     /* количество системных суток  */
 double	s;     /* количество системных секунд */
}KU_TimeDATA;

typedef struct 
{
int	d;     /* количество системных суток             */
 double	s;     /* количество системных секунд            */
 double	u;     /* интервал прогноза  по аргументу широты
                  при прогнозе до заданного времени      */
}TimeDATA_u;  

typedef struct 
{               /* календарная дата (в UTC) */
 int	y;      /* год   */     
 int	m;      /* мес   */
 int	d;      /* число */
 int	h;      /* час   */
 int	min;    /* мин   */
 double	sec;    /* сек   */
}KU_DateDATA;

typedef struct 
{
 double	e;      /* эксцентриситет                           */
 double	a;      /* большая полуось                          */
 double	tosk;   /* оскулирующий период                      */
 double	i;      /* наклонение орбиты          в ЭСК  (град) */
 double	om;     /* инерциальная долгота ВУО   в ЭСК  (град) */
 double	u;      /* аргумент широты            в ЭСК  (град) */
 double	w;      /* аргумент перигея           в ЭСК  (град) */
 double	wm;     /* аргумент перигея                  (град)
                   в зависимтсти от CK  
				     для tip=1 wm в меридианальной СК
                     для tip=2 wm = w                       */
 double	hap;    /* оскулирующая высота апогея               */
 double	hpi;    /* оскулирующая высота перигея              */
}KU_OskPar;

typedef struct 
{
 double	e;     /* эксцентриситет                   */
 double	tosk;  /* оскулирующий период              */
 double	i;     /* наклонение орбиты                */
 double	om;    /* инерциальная долгота ВУО   в ЭСК */ 
 double	u;     /* аргумент широты            в ЭСК */ 
 double	wpi;   /* аргумент перигея           в ЭСК */ 
}KU_OSKP;

typedef struct 
{
 int Pdu;
 double dV;
 int dtMAX;
 double ex;
 double ey;
 double ez;
 int tDDU;
 double gamma;
 int tODUN;
 int dtODU;
 int Pv;
 int Pu;
}s_PARC; 

typedef struct 
{
 double	e;      /* эксцентриситет                           */
 double	a;      /* большая полуось                          */
 double	tosk;   /* оскулирующий период                      */
 double	tdr;    /* драконический период                     */
 double	ig;     /* наклонение орбиты           в ЭСК (град) */
 double	omg;    /* инерциальная долгота ВУО    в ЭСК (град) */
 double	ug;     /* аргумент широты             в ЭСК (град  */
 double	wpg;    /* аргумент перигея            в ЭСК (град) */
 double	hap;    /* оскулирующая высота апогея               */
 double	hpi;    /* оскулирующая высота перигея              */
 double	lg;     /* геоцентрическая географическая долгота ВУО в ЭСК (град) */
 double	fg;     /* геоцентрическая географическая широта  ВУО в ЭСК (град) */
}KU_INFOE;   /* структура  информационных параметров для вектора R */


/* 06.09.2006 для коррекции */
typedef struct 
{
 int n_kor;                 /* заданное число  коррекций                      */
 KU_TimeDATA Mtkor[360][2]; /* массив времён начала и конца коррекций(tn и tk)*/
 double MW[360][3];         /* массив возмущающих ускорений (Ws Wt Wb)
                               в орбитальной СК                               */
 int    TIPkor[360];        /* массив типа коррекции:
                                      0 - нет коррекции, 1 - ODУ, 2 - DDУ     */
}KU_MKOR;    /* структура  массива коррекций */


typedef struct 
{
 int n_kor;                 /* заданное число действующих коррекций */
 KU_TimeDATA Mtkor[720][2]; /* массив времён действующих коррекций(tn и tk) */
 double MW[720][3];         /* массив программ действующих коррекций(Ws Wt Wb) */
 int    TIPkor[720];        /* массив типа коррекции: 0 - нет коррекции, 1 - ODУ, 2 - DDУ  */
}KU_MKORPob;

          
/* 17.10.2006 для результатов многозонной обработки */
typedef struct 
{
 int Pnk;                  /* признак наличия коррекци: 0 - нет коррекци, 1 - есть */
 KU_TimeDATA t;            /* время привязки вектора   R - результата многозонной обработки */
 double R[6];              /* вектор параметров орбиты R - результат многозонной обработки */
 double K[6][6];           /* корреляционная матрица ошибок в результате многозонной обработки*/
 double sig_T;             /* точность определения периода обращения КА */
 double sig_2;             /* оценка коэффициента при корреляционной матрице ошибок*/
}KU_STR_MROM;              /* структура строки результатов многозонной обработки OBIZM*/

typedef struct 
{
 int Npost;                 /* номер поста (Dtmax, alfamax, betamax) */
 int Nz;                    /* номер зоны  (Dtmax, alfamax, betamax) */
 double DEL_max;            /* DEL_max     (Dtmax, alfamax ,betamax) */
}KU_STR_MAXOTKL;            /* структура строки результатов MAXOTKL*/


/* Структура входных параметров функций для определения интервалов их положительности */	
typedef struct {

	KU_TimeDATA ta; // время привязки входного вектора 
	                   
    KU_TimeDATA t;  // заданное время расчета 
	                   
	double p[6];    // входной вектор параметров орбиты 
	                   
	int tip;		// тип интегрирования 

	double DEL_UT1; // поправка в значение UTC 

	int Npost;      // номер поста 

	double Skr;     // критическое значение угла СОР тли угла Ksi

	double s[3];    // направляющие косинусы Солнца

	double fi;     // заданный угол расчета 

	                   
}Finp_E;

/////////////////////////////////////////////////////////////////////////////////////
struct KA_PAR{
	double T;
	double e;               
	double i;
	double Omg;
	double omgpi;
	double u;
};
//struct KA_PAR ka;

struct s_KORR{
	int Pdu;
	double dV;
	int dtMAX;
	double e[3];
	int tDDU;
	double gamma;
	int tODUN;
	int dtODU;
	int Pv;
	int Pu;
};

struct Shad
{
int P;
double tn;
double tk;
};

struct MASS{
	double AT[6];
	double Ae[6];
	double Ai[6];
	double AOmg[6];
	double Api[6];
	double ATa[6];
};

struct UKP{
	int Pdu;
	double dV;
	int dTmax;
	double eDDU[3];
	KU_DateDATA Tddus;
	double gODU;
	KU_DateDATA TnODU;
	KU_DateDATA Tkodu;
};
struct CORR{
	int Pdu;
	double dV;
	int dTmax;
	double eDDU[3];
	int Tddus;
	double gODU;
	int TnODU;
	int dTodu;
};

struct D_IB_OPV
{
int m;
int tbsv;
int tr;
int NV;
int Kv[5];
int NC;
int Kc[5];
double Aop[5][5][6];
int k;
double dT;
double T1a;
struct KA_PAR ka;
int jc;
int ic;
int mc;
int nv;
int nc;
int nc2;
int Pkor;
double gamma1;
double dtk;
};

struct D_IB_SHADOW
{
int P1asn;
int P2asn;
KU_DateDATA Dp;
KU_DateDATA Dt;
int P1mkp;
int P2mkp;
int P3mkp;
double dT;
int tbsv;
int tau;
double T1a;
struct KA_PAR ka;
int tab;
int tp;
double dR;
double dV;
double Rasn[3];
double Vasn[3];
double Am[2][3];
struct s_KORR Ck;
int ic;
int jc;
int mc;
double dtk;
double dUT1;
double dTT;
double dpz;
double dpl; 
};

struct dd_ib_tzl
{
struct D_IB_OPV dd;
struct D_IB_SHADOW dib_sh;
KU_TimeDATA tn;
double Rn[6];
KU_TimeDATA ttk;
int tip;
KU_MKOR MDKOR;       // массив действующих коррекций  
KU_MKOR MPKOR;       // массив планируемых коррекций                               
KU_TimeDATA t00;
KU_TimeDATA t01;
};

struct ENTER_DATA{
	int tb;
	int t_gamma;
	int tnru;
	double Rka[3];
	double Vka[3];
	double MJD;
	double sm;
	double ro_zas;
	double dt_zas;
	double D_tn;
	double Sh_tn;
	double R_tn;
	int Pkor;
	double dzeta_Y;
	double dzeta_Z;
	double psi;
	double delta;
	double gamma1;
	double D_mt1;
	double Sh_mt1;
	double nu_mt1;
	double psi_mt1;
	double gamma_mt1;
	double Cteta_mt1[4][4];
	double Cphi_mt1[4][4];
	double D_mt2;
	double Sh_mt2;
	double nu_mt2;
	double psi_mt2;
	double gamma_mt2;
	double Cteta_mt2[4][4];
	double Cphi_mt2[4][4];
	double D_bkupi;
	double Sh_bkupi;
	double nu_bkupi;
	double psi_bkupi;
	double gamma_bkupi;
	double Cteta_bkupi[2];
	double Cphi_bkupi[2];
	double psi_mna;
	double dt_mna;
	double dTT;	
} ;

//struct s_KORR AC[5][4];
//struct Shad Mt[8];
//struct dd_ib_tzl tzl;
//struct D_IB_OPV dd;

typedef struct 
{	
      double	MIIap1[5][2];   // массив интервалдов  коррекций в апогее	на первом витке
      double    MIIap2[5][2];   // массив интервалдов  коррекций в апогее	на втором витке
      double    MIIpg1[5][2];   //массив интервалдов коррекций  в перегее на первом витке	
      double    MIIpg2[5][2];   //массив интервалдов коррекций  в перегее на первом витке	                                                                     
      double    dellap1;      // длина запрещенного интервала  в апогее на первом витке									 
      double    dellap2;      // длина запрещенного интервала в апогее на втором  витке												 
      double    dellpg1;      //длина запрещенного интервала  в перегее  на первом витке             
      double    dellpg2;     //длина запрещенного интервала  в перегее на втором витке                
      int       Pzka1;       //число допустимого кол-ва  разрешенных ориентаций 
                               //в апогейной зоне на первом витке
      int       Pzka2;       //число допустимого кол-ва  разрешенных ориентаций 
                             //в апогейной зоне на втором витке
	  int   	Pzkp1;       //число допустимого кол-ва  разрешенных ориентаций 
                              //в перегейной зоне на первом витке
	  int    	Pzkp2;       // число допустимого кол-ва  разрешенных ориентаций 
                               //в перегейной зоне на втором витке
      int       Porap1;      //номер ориентации в апогейной зоне на первом витке
	  int   	Porap2;      //номер ориентации в апогейной зоне на втором витке
      int       Porpg1;      //номер ориентации в перегейной зоне на первом витке
      int       Porpg2;      //номер ориентации в перегейной зоне на втором витке                                              
                                                                    
	  KU_TimeDATA tntl1;    // системное время начала участка тени Луны на первом витке
	  KU_TimeDATA tktl1;    //системное время конца участка тени Луны на первом витке
      KU_TimeDATA TZ1[5][2];   // системное время  участков тени Земли на первом витке
	  int	 Ptl1;  // признак наличия тени Луны на первом витке  
	  int	 Ptz1;  // признак наличия тени Земли на первом витке
	   KU_TimeDATA tntl2;    // системное время начала участка тени Луны на втором витке
	  KU_TimeDATA tktl2;    //системное время конца участка тени Луны на втором витке
      KU_TimeDATA TZ2[5][2];   // системное время  участков тени Земли на втором витке
	  int	 Ptl2;  // признак наличия тени Луны на втором витке  
	  int	 Ptz2;  // признак наличия тени Земли на втором витке

}MInt;      /* массив интервалов */


// FormM_ZTI
typedef struct
{
	int Nzti;       // номер ЗТИ
	KU_TimeDATA t;  // время привязки ЗТИ
	double Dt;      // радиальная скорость
	double alfa;    // азимут
	double beta;    // угол места
	int Pgz;        // признак годности ЗТИ

}StringZTI;

typedef struct
{

	KU_TimeDATA tv;  // время восхода
    KU_TimeDATA tz;  //  время захода
    KU_TimeDATA ta;  //  время апогея на витке измерений
	StringZTI MString[20];	//   массив структур "строк измерений"

}PageZTI;

typedef struct 
{
 int Nzti;       /* номер ЗТИ                                  */
 KU_TimeDATA t;  /* время ЗТИ                                  */
 double Dt;      /* радиальная скорость  в направлении станции */
 double alfa;    /* азимут                                     */ 
 double beta;    /* угол места                                 */
 int    PGZ;     /* признак годности ЗТИ  1 - зона есть и годна
                                         -1 - зона есть и негодная
				                          0 - зоны нет         */				                    
 int N_post;     /* номер поста                                */

}KU_ZTI;    /* структура   одной СТРОКИ  ЗТИ */

/****************************************************************************************/


/****************************************************************************************/
/*                        Структуры информационных таблиц                               */
/****************************************************************************************/
typedef struct 
{
	int NK;               // номер команды
    KU_DateDATA Dz;       // заданная дата расчета                         
    int Pv;               // признак витка                                 
    int Npost;            // номер поста(РИУС) (VOSX_E, DANZU1)
	int Pprc;             // признак формирования выходного файла (1 - краткий, 2 - полный) 
	int Pr;               // признак задания начального номера витка пользователем (RBPA)
	int kPr;	          // начальный номер витка в случае задания пользователем (RBPA)
    int kt;               // заданное число суток, вводимое оператором (RBU_E)                       
    char J[15];           // заданный номер изделия (FormM_ZTI)
    int Nv;               // усл.номер витка (FormM_ZTI)
    int Np_osn;           // номер осн.поста (FormM_ZTI)
    int Np_rez;           // номер.рез.поста (если Np_rez=0 - пост не назначен) (FormM_ZTI)
    int Nzti_rez;         // номер ЗТИ рез.поста,с которой безусловно продолжить заполнение вых.масс. (FormM_ZTI)
    int Pzap;             // признак запуска  (0 - назначение измерений, 1 - переназначение измерений) (NPI)

}MPK;

typedef struct 
{
    int tip;              // тип орбиты                                  
    double del_L1;        // длительность первого полинома, сек (CUR_E)      
    double del_L4;        // длительность четвертого полинома, сек (CUR_E)   
    int NZTI;             // заданное кол.ЗТИ на витке (FormM_ZTI)
    int Kvi;              // задаваемое количество витков измерений (NPI)

}TPKA;

typedef struct 
{
	double Rod[6];          // опорный действующий вектор параметров орбиты 
    KU_TimeDATA tod;        // время привязки вектора
    double DEL_UT1;         // поправка в значение UTC (VOSX_E)                 
    KU_MKOR MKORd;          // массив действующих коррекций (Ob_MK) 
    KU_MKOR MKORp;          // массив планируемых коррекций (Ob_MK)
	/* CUR_E */
	/* out */
    KU_TimeDATA tvosx;      // время восхода 
    KU_TimeDATA tzax;       // время захода                               
    KU_TimeDATA t_cu[4];    // времена начала полиномов 1,2,3,4              
    KU_TimeDATA t_p[4];     // времена точек привязки полиномов 1,2,3,4      
    double del_t[4];        // интервалы между точками аппроксимации полиномов 
    double a0[5];           // коэффициенты полинома 1     
	double b0[5];
	double c0[5];
	double a1[5];           // коэффициенты полинома 2      
	double b1[5];
	double c1[5];
	double a2[5];           // коэффициенты полинома 3      
	double b2[5];
	double c2[5];
	double a3[5];           // коэффициенты полинома 4     
	double b3[5];
	double c3[5];
	/* RBPA */
	/* inp */
	int Prpk;               // признак расчета бортовой программы коррекции(1 - проведен расчет, 0 - не проведен) 
	KU_TimeDATA tobn_sys;   // системное время последнего обнуления БСВ 
	int taB;	            // время прохождения первого за двухвитковый цикл апогея по БСВ  
	int Kp[NI];             // массив количеств витков в интервалах с различными типами коррекций 
	int NP;                 // количество интервалов с различными типами коррекций 
	s_PARC PC[NI][2];       // массив параметров коррекций орбиты для участка автономного функционирования 
	/* out */
	int k0;                 // номер первого витка на интервале апроксимации 
	int Kv[NI];             // массив номеров граничных витков для наборов коэфф. формул аппроксимации параметров орбиты 
	int NV;                 // кол-во наборов коэфф. для аппроксимации параметров орбиты 
	int tobn;               // время обнуления БСВ 
	double dt;              // расчетная ошибка предыдущего обнуления БСВ 
	double P;               // интервал времени до следующего обнуления БСВ с учетом расчетной ошибки обнуления 
	double T1a;             // период первого витка двухвиткового цикла 
	double T;               // период обращения КА на первом витке автономного участка 
	double i;               // наклонение орбиты на первом витке автономного участка 
	double e;               // эксцентриситет орбиты на первом витке автономного участка 
	double Omg;             // инерциальная долгота ВУ на первом витке автономного участка 
	double ompi;            // аргумент перигея на первом витке автономного участка 
	int nv;                 // номер текущего набора коэф. для апроксимации параметров орбиты 
	double dtk;             // поправка к "кеплерову" времени из-за коррекции 
	double Aop[NI][5][6];   // массив коэф. для аппроксимации параметров орбиты 
	double Ata[NI][6];      // массив коэф. для аппроксимации аномалистического периода 
	int PRkoef;             // признак переполнения массивов расчетной информации 
	int Prpa;               // признак расчета бортовой программы аппроксимации(1 - проведен расчет, 0 - не проведен) 
	/* RBU_E */
	/* out */
	MInt TOgr[60];          // массив интервалов ограничений 
    int Nkor;               // число интервалов коррекций 
	int kt;                 // заданное число суток, вводимое оператором 
	/* FormM_ZTI */
	/* inp */
    PageZTI mZTI_osn;       // стр-ца измерений с осн.поста 
    PageZTI mZTI_rez;       // стр-ца измерений с рез.поста 
	/* out */
	int Nv;                 // условный номер витка: 1,2,3,4,5,6,7,8 
	KU_TimeDATA tv;         // время восхода 
	KU_TimeDATA tz;         // время захода 
	KU_TimeDATA ta;         // время аппогея 
	KU_ZTI MZTI[20];        // массив структур строк ЗТИ 
	/* NPI */
	/* inp */
    KU_TimeDATA ta2;        // время апогея второго витка                       
    int Pizm;               // признак измерений (0 - измерения не назначены, 1 - процесс измерений назначен) 
    int Pvdv;               // признак выбора действующего вектора  
                            // (1 - вектор получен в рез-те многозонной обработки, 2 - вектор получен в рез-те обр-ки в-ров орбитальных параметров(ODV)
                            //  3 - вектор получен от АСН)
	/* out */
    PageZTI MPageZTI[8][7]; // массив измерений по одному аппарату 
    int Ndv;                // номер действующего втика 

}TBO;
/****************************************************************************************/


/*****************************************************************************************/
/*                  Входные и выходные структуры комплексных алгоритмов                  */
/*****************************************************************************************/
typedef struct 
{
	double Rod[6];        // опорный действующий вектор параметров орбиты(TBO) 
    KU_TimeDATA tod;      // время привязки вектора(TBO)                       
    KU_DateDATA Dz;       // заданная дата расчета(МПК)                         
    int tip;              // тип орбиты(ТПКА)                                  
    int Pv;               // признак витка(МПК)                                
    double del_L1;        // длительность первого полинома, сек(ТПКА)       
    double del_L4;        // длительность четвертого полинома, сек(ТПКА)    
    double DEL_UT1;       // поправка в значение UTC(ТВО)                  
    int Npost;            // номер поста(МПК)                                 
    KU_MKOR MKORd;        // массив действующих коррекций (ТВО) 
    KU_MKOR MKORp;        // массив планируемых коррекций (ТВО)
	int Pprc;             // признак формирования выходного файла (1 - краткий, 2 - полный) (МПК)

}CUR_E_INP;      /* структура входных параметров CUR_E */


typedef struct 
{
	KU_TimeDATA tvosx;    // время восхода(TBO) 
    KU_TimeDATA tzax;     // время захода(TBO)                               
    KU_TimeDATA t_cu[4];  // времена начала полиномов 1,2,3,4 (ТВО)             
    KU_TimeDATA t_p[4];   // времена точек привязки полиномов 1,2,3,4 (ТВО)     
    double del_t[4];      // интервалы между точками аппроксимации полиномов (ТВО) 
    double a0[5];         // коэффициенты полинома 1 (ТВО)     
	double b0[5];
	double c0[5];
	double a1[5];         // коэффициенты полинома 2 (ТВО)     
	double b1[5];
	double c1[5];
	double a2[5];         // коэффициенты полинома 3 (ТВО)     
	double b2[5];
	double c2[5];
	double a3[5];         // коэффициенты полинома 4 (ТВО)     
	double b3[5];
	double c3[5];
	
}CUR_E_OUT;      /* структура выходных параметров CUR_E */ 


typedef struct 
{
	KU_TimeDATA tod;        // время привязки вектора(TBO)
	double Rod[6];          // опорный действующий вектор параметров орбиты(TBO)
    KU_DateDATA Dz;         // заданная дата расчета(МПК)                         
	int tip;                // тип орбиты(ТПКА)                                  
    int Pv;                 // признак витка(МПК) 
	int Prpk;               // признак расчета бортовой программы коррекции(1 - проведен расчет, 0 - не проведен) (ТВО)
    KU_MKOR MKORd;          // массив действующих коррекций (ТВО) 
    KU_MKOR MKORp;          // массив планируемых коррекций (ТВО)
	int Pr;                 // признак задания начального номера витка пользователем (МПК)
	int kPr;	            // начальный номер витка в случае задания пользователем (МПК)
	KU_TimeDATA tobn_sys;   // системное время последнего обнуления БСВ (TBO)
	int taB;	            // время прохождения первого за двухвитковый цикл апогея по БСВ (TBO) 
	int Kp[NI];             // массив количеств витков в интервалах с различными типами коррекций (TBO)
	int NP;                 // количество интервалов с различными типами коррекций (TBO)
	s_PARC PC[NI][2];       // массив параметров коррекций орбиты для участка автономного функционирования (TBO)
	int Pprc;               // признак формирования выходного файла (1 - краткий, 2 - полный) (МПК)

}RBPA_INP;       /* структура входных параметров RBPA */     


typedef struct 
{
	int k0;                 // номер первого витка на интервале апроксимации (TBO)
	int Kv[NI];             // массив номеров граничных витков для наборов коэфф. формул аппроксимации параметров орбиты (TBO)
	int NV;                 // кол-во наборов коэфф. для аппроксимации параметров орбиты (TBO)
	int tobn;               // время обнуления БСВ (TBO) 
	double dt;              // расчетная ошибка предыдущего обнуления БСВ (TBO)
	double P;               // интервал времени до следующего обнуления БСВ с учетом расчетной ошибки обнуления (TBO)
	double T1a;             // период первого витка двухвиткового цикла (TBO)
	double T;               // период обращения КА на первом витке автономного участка (TBO)
	double i;               // наклонение орбиты на первом витке автономного участка (TBO)
	double e;               // эксцентриситет орбиты на первом витке автономного участка (TBO)
	double Omg;             // инерциальная долгота ВУ на первом витке автономного участка (TBO)
	double ompi;            // аргумент перигея на первом витке автономного участка (TBO)
	int nv;                 // номер текущего набора коэф. для апроксимации параметров орбиты (TBO)
	double dtk;             // поправка к "кеплерову" времени из-за коррекции (TBO)
	double Aop[NI][5][6];   // массив коэф. для аппроксимации параметров орбиты (TBO)
	double Ata[NI][6];      // массив коэф. для аппроксимации аномалистического периода (TBO)
	int PRkoef;             // признак переполнения массивов расчетной информации (TBO)
	int Prpa;               // признак расчета бортовой программы аппроксимации(1 - проведен расчет, 0 - не проведен) (TBO)

}RBPA_OUT;       /* структура выходных параметров RBPA */


typedef struct 
{
	double Rod[6];        // опорный действующий вектор параметров орбиты(TBO) 
    KU_TimeDATA tod;      // время привязки вектора(TBO)                       
    KU_DateDATA Dz;       // заданная дата расчета(МПК)                         
    int tip;              // тип орбиты(ТПКА)                                  
    int Pv;               // признак витка(МПК)                                
    int Pprc;             // признак формирования выходного файла (1 - краткий, 2 - полный) (МПК)
    int kt;               // заданное число суток, вводимое оператором (МПК)                       
    KU_MKOR MKORd;        // массив действующих коррекций (TBO) 
    KU_MKOR MKORp;        // массив планируемых коррекций (TBO)                              

}RBU_E_INP;      /* структура  входных параметров RBU_E */


typedef struct 
{
	MInt TOgr[60];    // массив интервалов ограничений (TBO)
    int Nkor;         // число интервалов коррекций (TBO)
	int kt;           // заданное число суток, вводимое оператором (TBO)

}RBU_E_OUT;      /* структура выходных параметров RBU_E */


typedef struct
{
   char J[15];        // заданный номер изделия (МПК)
   int NZTI;          // заданное кол.ЗТИ на витке (ТПКА)
   int Nv;            // усл.номер витка (МПК)
   int Np_osn;        // номер осн.поста (МПК)
   int Np_rez;        // номер.рез.поста (если Np_rez=0 - пост не назначен) (МПК)
   int Nzti_rez;      // номер ЗТИ рез.поста,с к-рой безусловно продолжить заполнение вых.масс. (МПК)
   PageZTI mZTI_osn;  // стр-ца измерений с осн.поста (TBO)
   PageZTI mZTI_rez;  // стр-ца измерений с рез.поста (TBO)

}FormM_ZTI_INP;   /* структура входных параметров FormM_ZTI */


typedef struct 
{
	int Nv;            // условный номер массива (витка): 1,2,3,4,5,6,7,8 (TBO)
	KU_TimeDATA tv;    // время восхода (TBO)
	KU_TimeDATA tz;    // время захода (TBO)
	KU_TimeDATA ta;    // время аппогея (TBO)
	KU_ZTI MZTI[20];   // массив структур строк ЗТИ (TBO)

}KU_M_ZTI;        /* структура ЗТИ для витка (выходная структура FormM_ZTI) */


typedef struct 
{
  double Rod[6];        // опорный действующий вектор параметров орбиты(TBO) 
  KU_TimeDATA tod;      // время привязки вектора(TBO)                    
  KU_TimeDATA ta2;      // время апогея второго витка (TBO)                      
  KU_DateDATA Dz;       // заданная дата расчета(МПК)                         
  int tip;              // тип орбиты(ТПКА)                                  
  int Pv;               // признак витка(МПК) 
  double DEL_UT1;       // поправка в значение UTC(ТВО)                  
  int Npost;            // номер поста(МПК)  
  int Kvi;              // задаваемое количество витков измерений(ТПКА)
  KU_MKOR MKORd;        // массив действующих коррекций (TBO) 
  KU_MKOR MKORp;        // массив планируемых коррекций (TBO)
  int Pizm;             // признак измерений (0 - измерения не назначены, 1 - процесс измерений назначен) (TBO)
  int Pvdv;             // признак выбора действующего вектора (TBO) 
                        // (1 - вектор получен в рез-те многозонной обработки, 2 - вектор получен в рез-те обр-ки в-ров орбитальных параметров(ODV)
                        //  3 - вектор получен от АСН)
  int Pzap;             // признак запуска  (0 - назначение измерений, 1 - переназначение измерений) (МПК)        

}NPI_INP;        /* структура входных параметров NPI */      


typedef struct 
{
   PageZTI MPageZTI[8][7];  // массив измерений по одному аппарату (TBO)
   int Ndv;                 // номер действующего втика (TBO)
   int Pizm;                // признак измерений (0 - измерения не назначены, 1 - процесс измерений назначен) (TBO)

}MIZM;           /* структура выходных параметров NPI */ 


typedef struct 
{
 int T_tip;                // тип системы координат 
 KU_TimeDATA T_top;        // время привязки опорного вектора   Rop 
 KU_TimeDATA T_tod;        // время привязки действующего вектора   Rod 
 double T_Rod[6];          // действующий вектор параметров орбиты Rod 
 int T_Pnk;                // признак наличия коррекци:   1 - есть, 0 - нет 
 KU_MKOR     T_STRKOR;     // структура  массива коррекций 
 KU_M_ZTI    T_VIT_ZTI;    // структура  ЗТИ для витка 
 double  T_DEL_UT1;        // поправка в значение UTC 
 double T_sdp[6];          // вектор дисперсий ошибок по r,v,tet,xi,fi,b 
 int T_Pup;                // признак учёта поправок РГЭ: 1 - да, 0 - нет 
 int T_Pzm;                // признак необходимости сдвига массива MROM:   1 - сдвигается, 0 - нет 
 KU_STR_MROM T_MROM[8];    // массив структур строк результатов многозонной обработки OBIZM 

}KU_INP_OBM;     /* структура входных параметров многозонной обработки OBM */


typedef struct 
{
 double T_Rop[6];          // опорный вектор параметров орбиты Rop 
 double T_Rmz[6];          // вектор результатов многозонной обработки Rmz (измеренный) 
 double T_DEL_Rmz[6];      // разница между измеренным и опорным векторами параметров орбиты 
 double T_K1_b[6][6];      // корреляционная матрица ошибок многозонной обработки (r,v,teta,xi,fi,b)
 KU_STR_MROM T_MROM[8];    // массив структур строк результатов многозонной обработки OBIZM 
 KU_STR_MAXOTKL T_MOTKL[3];// массив структур результатов MAXOTKL
 int T_Ppob;               // Ppob  -  признак прохождения обработки измерений OBIZM 

}KU_OUT_OBM;     /* структура выходных параметров многозонной обработки OBM */


typedef struct 
{
 KU_INP_OBM INPOBM;      // структура входных параметров многозонной обработки OBM 
 KU_OUT_OBM OUTOBM;      // структура выходных параметров многозонной обработки OBM 

}KU_STR_OBM;     /* структура  входных и выходных параметров многозонной обработки OBM */

/******************************************************************************************/


/******************************************************************************************/
/*                     Комплексные функциональные программы НБО                           */
/******************************************************************************************/
// XKY.НВО.5.3. Обработка измерений
int FormM_ZTI(FormM_ZTI_INP *INPFormMZTI, KU_M_ZTI *OUTFormMZTI);
int NPI(NPI_INP *INPNPI, MIZM *OUTNPI);

// XKY.HBO.5.4. Расчет целеуказаний для поста РИУС
int CUR_E(CUR_E_INP *INPCUR, CUR_E_OUT *OUTCUR);

// XKY.НВО.5.7. Расчет данных для контроля и управления КА
void RBPA(RBPA_INP *INPRBPA, RBPA_OUT *OUTRBPA);

// XKY.HBO.5.11. Расчет астробаллистических условий функционирования КА
int RBU_E(RBU_E_INP *INPRBU, RBU_E_OUT *OUTRBU);

/******************************************************************************************/

#endif